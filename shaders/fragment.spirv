#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout(binding = 1) uniform sampler2D texSampler;
layout(binding = 2) uniform sampler2D normalSampler;
layout(binding = 3) uniform sampler2D specularSampler;

layout(location = 0) in vec3 fragColor;
layout(location = 1) in vec2 fragTexCoord;

layout(location = 0) out vec4 outColor;

void main() {
	mat4 m = ubo.view * ubo.model;
	mat4 mit = transpose(inverse(ubo.view * ubo.model));

	vec3 normal = texture(normalSampler, fragTexCoord).xyz;
	normal = normal * 2 - vec3(1, 1, 1);
	normal = normalize((mit * vec4(normal, 1)).xyz);

	vec4 light_dir = vec4(1, 1, 0, 0);
	vec3 light = normalize((m * light_dir).xyz);

	float intensity = max(0, dot(normal, light));

	vec3 light_reflected = normalize(normal * 2.0 * dot(normal,light) - light);

	float specular = texture(specularSampler, fragTexCoord).x;
	specular = pow(max(0, light_reflected.z), specular * 255);
	
	outColor = texture(texSampler, fragTexCoord) * (60.0/255.0 + 1.2 * intensity + 0.6 * specular);
}